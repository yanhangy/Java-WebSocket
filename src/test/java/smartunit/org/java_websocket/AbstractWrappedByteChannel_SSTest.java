/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.org.java_websocket;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import java.nio.ByteBuffer;
import java.nio.channels.ByteChannel;
import org.java_websocket.AbstractWrappedByteChannel;
import org.java_websocket.WrappedByteChannel;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AbstractWrappedByteChannel_SSTest extends AbstractWrappedByteChannel_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_read_0()  throws Throwable  {
      //caseID:b9b6c4683743c2c2b99e33bab4d8d1c6
      ByteChannel byteChannel0 = mock(ByteChannel.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      AbstractWrappedByteChannel abstractWrappedByteChannel0 = new AbstractWrappedByteChannel(byteChannel0);
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      int int0 = abstractWrappedByteChannel0.read(byteBuffer0);
      assertEquals(0, int0);
  }
  @Test(timeout = 4000)
  public void test_write_1()  throws Throwable  {
      //caseID:9b9575107636d6e49be872daa963784d
      WrappedByteChannel wrappedByteChannel0 = mock(WrappedByteChannel.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      AbstractWrappedByteChannel abstractWrappedByteChannel0 = new AbstractWrappedByteChannel(wrappedByteChannel0);
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      int int0 = abstractWrappedByteChannel0.write(byteBuffer0);
      assertEquals(0, int0);
  }
  @Test(timeout = 4000)
  public void test_isOpen_2()  throws Throwable  {
      //caseID:0f0cf2e7aca5eee95d3516ae0f334629
      WrappedByteChannel wrappedByteChannel0 = mock(WrappedByteChannel.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      AbstractWrappedByteChannel abstractWrappedByteChannel0 = new AbstractWrappedByteChannel(wrappedByteChannel0);
      boolean boolean0 = abstractWrappedByteChannel0.isOpen();
      assertFalse(boolean0);
  }
  @Test(timeout = 4000)
  public void test_isNeedRead_3()  throws Throwable  {
      //caseID:78048f7a8cdc94e31b13bd5c84f5c2e3
      ByteChannel byteChannel0 = mock(ByteChannel.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      AbstractWrappedByteChannel abstractWrappedByteChannel0 = new AbstractWrappedByteChannel(byteChannel0);
      boolean boolean0 = abstractWrappedByteChannel0.isNeedRead();
      assertFalse(boolean0);
  }}
