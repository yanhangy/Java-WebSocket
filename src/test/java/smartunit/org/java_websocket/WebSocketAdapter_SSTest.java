/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.org.java_websocket;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import java.nio.ByteBuffer;
import org.java_websocket.WebSocket;
import org.java_websocket.WebSocketAdapter;
import org.java_websocket.drafts.Draft;
import org.java_websocket.framing.Framedata;
import org.java_websocket.framing.PingFrame;
import org.java_websocket.handshake.ClientHandshake;
import org.java_websocket.handshake.ServerHandshake;
import org.java_websocket.handshake.ServerHandshakeBuilder;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class WebSocketAdapter_SSTest extends WebSocketAdapter_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_onWebsocketHandshakeReceivedAsServer_0()  throws Throwable  {
      //caseID:e1e21bb604f72ba6e7545f4219502642
      WebSocketAdapter webSocketAdapter0 = mock(WebSocketAdapter.class, CALLS_REAL_METHODS);
      WebSocket webSocket0 = mock(WebSocket.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Draft draft0 = mock(Draft.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      ClientHandshake clientHandshake0 = mock(ClientHandshake.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      ServerHandshakeBuilder serverHandshakeBuilder0 = webSocketAdapter0.onWebsocketHandshakeReceivedAsServer(webSocket0, draft0, clientHandshake0);
      assertEquals((short)0, serverHandshakeBuilder0.getHttpStatus());
  }
  @Test(timeout = 4000)
  public void test_onWebsocketHandshakeReceivedAsClient_1()  throws Throwable  {
      //caseID:bdeff48834718c018bcd02fbfefbdba5
      WebSocketAdapter webSocketAdapter0 = mock(WebSocketAdapter.class, CALLS_REAL_METHODS);
      WebSocket webSocket0 = mock(WebSocket.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      ClientHandshake clientHandshake0 = mock(ClientHandshake.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      ServerHandshake serverHandshake0 = mock(ServerHandshake.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

      //invoke method for webSocketAdapter0
      webSocketAdapter0.onWebsocketHandshakeReceivedAsClient(webSocket0, clientHandshake0, serverHandshake0);
  }
  @Test(timeout = 4000)
  public void test_onWebsocketHandshakeSentAsClient_2()  throws Throwable  {
      //caseID:1ff7f865b9d551201f5fa1d553342c1f
      WebSocketAdapter webSocketAdapter0 = mock(WebSocketAdapter.class, CALLS_REAL_METHODS);
      WebSocket webSocket0 = mock(WebSocket.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      ClientHandshake clientHandshake0 = mock(ClientHandshake.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

      //invoke method for webSocketAdapter0
      webSocketAdapter0.onWebsocketHandshakeSentAsClient(webSocket0, clientHandshake0);
  }
  @Test(timeout = 4000)
  public void test_onWebsocketPong_3()  throws Throwable  {
      //caseID:37c7a5fdc73d34948e9aaf478d81bc52
      WebSocketAdapter webSocketAdapter0 = mock(WebSocketAdapter.class, CALLS_REAL_METHODS);
      WebSocket webSocket0 = mock(WebSocket.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Framedata framedata0 = mock(Framedata.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

      //invoke method for webSocketAdapter0
      webSocketAdapter0.onWebsocketPong(webSocket0, framedata0);
  }
  @Test(timeout = 4000)
  public void test_onWebsocketPing_4()  throws Throwable  {
      //caseID:270ad0e0b551259af977f9b2b8aeda13
      WebSocketAdapter webSocketAdapter0 = mock(WebSocketAdapter.class, CALLS_REAL_METHODS);

      //prepare data for pingFrame0
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PingFrame pingFrame0 = mock(PingFrame.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(byteBuffer0).when(pingFrame0).getPayloadData();
      WebSocket webSocket0 = mock(WebSocket.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

      //invoke method for webSocketAdapter0
      webSocketAdapter0.onWebsocketPing(webSocket0, pingFrame0);
  }
  @Test(timeout = 4000)
  public void test_onPreparePing_5()  throws Throwable  {
      //caseID:514865028c4b003071569820a18dd510
      WebSocketAdapter webSocketAdapter0 = mock(WebSocketAdapter.class, CALLS_REAL_METHODS);
      WebSocket webSocket0 = mock(WebSocket.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PingFrame pingFrame0 = webSocketAdapter0.onPreparePing(webSocket0);
      assertNotNull(pingFrame0);
      assertFalse(pingFrame0.getTransfereMasked());
  }}
