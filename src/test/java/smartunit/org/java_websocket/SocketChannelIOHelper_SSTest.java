/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.org.java_websocket;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import java.nio.ByteBuffer;
import java.nio.channels.ByteChannel;
import org.java_websocket.SocketChannelIOHelper;
import org.java_websocket.WebSocketImpl;
import org.java_websocket.WrappedByteChannel;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SocketChannelIOHelper_SSTest extends SocketChannelIOHelper_SSTest_scaffolding {
// allCoveredLines:[41, 42, 43, 45, 46, 47, 49, 63, 64, 65, 67, 68, 69, 71, 83, 84, 86]

  @Test(timeout = 4000)
  public void test_batch_0()  throws Throwable  {
      //caseID:f873f529430969d81a68142f66ca6dc7
      //CoveredLines: [83, 86]
      //Input_0_WebSocketImpl: {}
      //Input_1_ByteChannel: {}
      
      //mock webSocketImpl0
      WebSocketImpl webSocketImpl0 = mock(WebSocketImpl.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock wrappedByteChannel0
      WrappedByteChannel wrappedByteChannel0 = mock(WrappedByteChannel.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: batch
      // Undeclared exception!
      try { 
        SocketChannelIOHelper.batch(webSocketImpl0, wrappedByteChannel0);
      } catch(Throwable e) {
         verifyException("org.java_websocket.SocketChannelIOHelper", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 4000)
  public void test_batch_1()  throws Throwable  {
      //caseID:f603c68f2f5d2b8c1d02116a55a441e8
      //CoveredLines: [83, 84]
      //Input_0_WebSocketImpl: null
      //Input_1_ByteChannel: {}
      //Assert: assertFalse(method_result);
      
      //mock wrappedByteChannel0
      WrappedByteChannel wrappedByteChannel0 = mock(WrappedByteChannel.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: batch
      boolean boolean0 = SocketChannelIOHelper.batch((WebSocketImpl) null, wrappedByteChannel0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test_read_2()  throws Throwable  {
      //caseID:91dca6397fff76b7cc404c9d7d86b1d6
      //CoveredLines: [41, 42, 43, 45, 49]
      //Input_0_ByteBuffer: {}
      //Input_1_WebSocketImpl: {}
      //Input_2_ByteChannel: {read=639}
      //Assert: assertTrue(method_result);
      
      //mock byteBuffer0
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock webSocketImpl0
      WebSocketImpl webSocketImpl0 = mock(WebSocketImpl.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock byteChannel0
      ByteChannel byteChannel0 = mock(ByteChannel.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(639).when(byteChannel0).read(any(java.nio.ByteBuffer.class));
      
      //Call method: read
      boolean boolean0 = SocketChannelIOHelper.read(byteBuffer0, webSocketImpl0, byteChannel0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test_read_3()  throws Throwable  {
      //caseID:0c957d4c5daa891b58b31b58e1e5da8a
      //CoveredLines: [41, 42, 43, 45, 49]
      //Input_0_ByteBuffer: {}
      //Input_1_WebSocketImpl: {}
      //Input_2_ByteChannel: {}
      //Assert: assertFalse(method_result);
      
      //mock byteBuffer0
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock webSocketImpl0
      WebSocketImpl webSocketImpl0 = mock(WebSocketImpl.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock byteChannel0
      ByteChannel byteChannel0 = mock(ByteChannel.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: read
      boolean boolean0 = SocketChannelIOHelper.read(byteBuffer0, webSocketImpl0, byteChannel0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test_read_4()  throws Throwable  {
      //caseID:ff2ea91c1ff2874b9fb33129d5c271ee
      //CoveredLines: [41, 42, 43, 45, 46, 47]
      //Input_0_ByteBuffer: {}
      //Input_1_WebSocketImpl: {}
      //Input_2_ByteChannel: {read=(-1)}
      //Assert: assertFalse(method_result);
      
      //mock byteBuffer0
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock webSocketImpl0
      WebSocketImpl webSocketImpl0 = mock(WebSocketImpl.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock byteChannel0
      ByteChannel byteChannel0 = mock(ByteChannel.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(byteChannel0).read(any(java.nio.ByteBuffer.class));
      
      //Call method: read
      boolean boolean0 = SocketChannelIOHelper.read(byteBuffer0, webSocketImpl0, byteChannel0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test_readMore_5()  throws Throwable  {
      //caseID:161f68225365fe7cc6e538b55d617de4
      //CoveredLines: [63, 64, 65, 67, 71]
      //Input_0_ByteBuffer: {}
      //Input_1_WebSocketImpl: {}
      //Input_2_WrappedByteChannel: {}
      //Assert: assertFalse(method_result);
      
      //mock byteBuffer0
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock webSocketImpl0
      WebSocketImpl webSocketImpl0 = mock(WebSocketImpl.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock wrappedByteChannel0
      WrappedByteChannel wrappedByteChannel0 = mock(WrappedByteChannel.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: readMore
      boolean boolean0 = SocketChannelIOHelper.readMore(byteBuffer0, webSocketImpl0, wrappedByteChannel0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test_readMore_6()  throws Throwable  {
      //caseID:806f5c83c3ff874b091a7cb6dc63093e
      //CoveredLines: [63, 64, 65, 67, 68, 69]
      //Input_0_ByteBuffer: {}
      //Input_1_WebSocketImpl: {}
      //Input_2_WrappedByteChannel: {isNeedRead=false, readMore=(-1)}
      //Assert: assertFalse(method_result);
      
      //mock byteBuffer0
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock webSocketImpl0
      WebSocketImpl webSocketImpl0 = mock(WebSocketImpl.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock wrappedByteChannel0
      WrappedByteChannel wrappedByteChannel0 = mock(WrappedByteChannel.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(false).when(wrappedByteChannel0).isNeedRead();
      doReturn((-1)).when(wrappedByteChannel0).readMore(any(java.nio.ByteBuffer.class));
      
      //Call method: readMore
      boolean boolean0 = SocketChannelIOHelper.readMore(byteBuffer0, webSocketImpl0, wrappedByteChannel0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }
}
